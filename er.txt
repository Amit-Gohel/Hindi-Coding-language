a=['અ','આ','ઇ','ઈ','ઉ','ઊ','ઋ','ઌ','ઍ','એ','ઐ','ઑ','ઓ','ઔ']


import sys
from io import StringIO
import contextlib

@contextlib.contextmanager
def stdoutIO(stdout=None):
    old=sys.stdout
    if stdout is None:
        stdout = StringIO()
    sys.stdout=stdout
    yield stdout
    sys.stdout = old

code = '''
print("hellow")
'''

with stdoutIO() as s:
    exec(code)


p=(s.getvalue())

print(p)


 
from tkinter import *
 
root = Tk()
fram = Frame(root)
Label(fram,text='Text to find:').pack(side=LEFT)
edit = Entry(fram)
edit.pack(side=LEFT, fill=BOTH, expand=1)
edit.focus_set()
butt = Button(fram, text='Find') 
butt.pack(side=RIGHT)
fram.pack(side=TOP)
 
 
text = Text(root)
text.insert('1.0','''Type your text here''')
text.pack(side=BOTTOM)
 
 
 
def find():
     
    text.tag_remove('found', '1.0', END)
    s = edit.get()
    if s:
        idx = '1.0'
        while 1:
            idx = text.search(s, idx, nocase=1,
                              stopindex=END)
            if not idx: break
            lastidx = '%s+%dc' % (idx, len(s))
            text.tag_add('found', idx, lastidx)
            idx = lastidx
       text.tag_config('found', foreground='red')
    edit.focus_set()
butt.config(command=find)
root.mainloop()


#Python Program to search string in text using Tkinter
 
from tkinter import *
 
#to create a window
root = Tk()
 
#root window is the parent window
fram = Frame(root)
 
#adding label to search box
Label(fram,text='Text to find:').pack(side=LEFT)
 
#adding of single line text box
edit = Entry(fram)
 
#positioning of text box
edit.pack(side=LEFT, fill=BOTH, expand=1)
 
#setting focus
edit.focus_set()
 
#adding of search button
butt = Button(fram, text='Find') 
butt.pack(side=RIGHT)
fram.pack(side=TOP)
 
#text box in root window
text = Text(root)
 
#text input area at index 1 in text window
text.insert('1.0','''Type your text here''')
text.pack(side=BOTTOM)
 
 
#function to search string in text
def find():
     
    #remove tag 'found' from index 1 to END
    text.tag_remove('found', '1.0', END)
     
    #returns to widget currently in focus
    #s = edit.get()
    s='print'
    if s:
        idx = '1.0'
        while 1:
            #searches for desired string from index 1
            idx = text.search(s, idx, nocase=1,
                              stopindex=END)
            if not idx: break
             
            #last index sum of current index and
            #length of text
            lastidx = '%s+%dc' % (idx, len(s))
             
            #overwrite 'Found' at idx
            text.tag_add('found', idx, lastidx)
            idx = lastidx
         
        #mark located string as red
        text.tag_config('found', foreground='red')
    edit.focus_set()
butt.config(command=find)
 
#mainloop function calls the endless loop of the window,
#so the window will wait for any
#user interaction till we close it
root.mainloop()



#######################

def find(code):
        s=code
        if s:
            idx = '1.0'
            while 1:
                idx = editor.search(s, idx, nocase=1,stopindex=END)
                if not idx: break
                    #last index sum of current index and
                    #length of text
                lastidx = '%s+%dc' % (idx, len(s))
                editor.tag_add('found', idx, lastidx)
                idx = lastidx
            editor.tag_config('found', foreground='red')
    find('print')
    find('swapnil')



    @@@@@@@@@@@@@@@@@@@@@@@@@@@@
    def olp(self):
        b='ફરીથી' 
        c=[i for i in range(len(self.inputcode)) if self.inputcode.startswith(b,i)]
        #print(c)
        code=True

        for k in range(len(c)):
            i=c[0]
            while(code==True):
                if(self.inputcode[i]=='\n'):
                    break
                i=i+1
            q=(self.inputcode[c[0]+6:i-2])
            f=q.find(',')
            txe=q[1:f]
            txe1=q[f+1:len(q)]
            self.inputcode=self.inputcode.replace(self.inputcode[c[0]:i],f'for {txe} in range ({txe1}):')
            c=[i for i in range(len(self.inputcode)) if self.inputcode.startswith(b,i)]
        return self.inputcode